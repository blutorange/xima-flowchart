#
# JSON. Based upon KGraph.
#   http://rtsys.informatik.uni-kiel.de/confluence/display/KIELER/JSON+Graph+Format
#   http://rtsys.informatik.uni-kiel.de/confluence/display/KIELER/KLay+Layered+Layout+Options
#

* TREE *
# Represents the workflow.
{
    id                         : "de.xima.fc.workflow"
    children                   : <ARRAY[NODE]> # See below for the node format.
    edges                      : <ARRAY[EDGE]> # See below for the edge format.
    properties : {
        de.xima.fc.diagramType : LAYERED | MINDMAP # Type of the rendered diagram. Only layered is supported currently.
        de.xima.fc.folder      : <STRING> # Path to folder with containg all the resources.
		de.xima.fc.resources   : {
            userGroup : <OBJECT[RESOURCE-USERGROUP.id,RESOURCE-USERGROUP]>
            html : <OBJECT[RESOURCE-HTML.id,RESOURCE-HTML]>
            xsl : <OBJECT[RESOURCE-XSL.id,RESOURCE-XSL]>
            url : <OBJECT[RESOURCE-URL.id,RESOURCE-URL]>
            mailbox : <OBJECT[RESOURCE-MAILBOX.id,RESOURCE-MAILBOX]>
            plugin : <OBJECT[RESOURCE-PLUGIN.id,RESOURCE-PLUGIN]>
            file : <OBJECT[RESOURCE-FILE.id,RESOURCE-FILE]>
            font: <OBJECT[RESOURCE-FONT.id,RESOURCE-FONT]>
            image : {
                font : {
                    <OBJECT[RESOURCE-IMAGE-FONT.id,RESOURCE-IMAGE-FONT]>
                }
                svg : {
                    <OBJECT[RESOURCE-IMAGE-SVG.id,RESOURCE-IMAGE-SVG]>                
                }
                image : {
                    <OBJECT[RESOURCE-IMAGE-IMAGE.id,RESOURCE-IMAGE-IMAGE]>
                }
            }
        }
    }
}

* NODE *
# Represents an available status.
{
    id : "de.xima.fc.status-<UNIQUE_ID>" # Unique status id.
    children : <ARRAY[ACTION]>
    properties : {
        de.xima.fc.status.name                   : <STRING> # Status name. Must no be empty string.
        de.xima.fc.status.identifier             : <STRING> # Status identifier. May be empty string.
        de.xima.fc.status.comments               : <STRING> # Status Comments. May be empty string.
        de.xima.fc.status.icon                   : <STRING> # ID of the image used as icon used for this status. May be set to null.
        de.xima.fc.status.onError                : STOP | PROCEED # Action upon error during status transition.

        de.xima.fc.status.deletable              : <BOOL>   # Whether transaction with this status may be deleted.
        de.xima.fc.status.hasTimedTransition     : <BOOL>   # Whether there is a timed transition. True iff there exists
                                                            # any edge with the de.xima.fc.transitionType property set to AUTO.
        de.xima.fc.status.statusAfterResubmission: <STRING> # ID of the status after resubmitting a form.


		de.xima.fc.status.timedTransitionTarget  : <STRING>
		de.xima.fc.status.timedTransitionOnlyForUnread : <BOOL>
		de.xima.fc.status.timedTransitionSeconds : <INTEGER>
		
        de.xima.fc.status.hasSourceRestrictions  : <BOOL>   # True iff restrictions on the initatior of a manual status transition may be set.
                                                            # Eg., false for status "Eingegangen".
                                                            # Must be set to true if restrictions may be set and none are set.
        de.xima.fc.status.hasSourceTransitions   : <BOOL>   # True iff restrictions on the source status of a manual status transition may be set.
                                                            # Eg., false for status "Eingegangen".
                                                            # Must be set to true if restrictions may be set and none are set.
        de.xima.fc.status.isIncoming              : <BOOL>  # Setting this option to TRUE forces the node to appear on the first layer.
                                                            # You may want to set this to TRUE if this status is one of the special
                                                            # system status "Eingegangen", "Wiedervorlage", or "SAVED".
        de.xima.fc.status.isOutgoing              : <BOOL>  # Setting this option to TRUE forces the node to appear on the last layer.
                                                            # You may want to set this to TRUE if this status is a special system
                                                            # status that always appears last.


        de.xima.fc.status.restrictionsFrom       : <ARRAY[STRING]> # User group ids to which a manual transition
                                                                   # to this status is available.
        de.xima.fc.status.transitionsFrom        : <ARRAY[STRING]> # List of status IDs from which a manual transition
                                                                   # to this status may take place.
    }
}

* ACTION *
# Represents a formcycle action.
{
    id : "de.xima.fc.action-<UNIQUE_ID>" # Unique action id.
    properties : {
        de.xima.fc.action.name          : <STRING>        # User-defined name of the action.
        de.xima.fc.action.displayName   : <STRING>        # System-defined name of the action.

        de.xima.fc.action.onError       : STOP | <STRING> # Action taken if an error occurs. May be either
                                                          # STOP (do not proceed to any further actions) or
                                                          # the ID of an action to be executed.
                                                          # Note that action IDs take the "de.xima.fc.action-",
                                                          # prefix, thus there cannot be any name collisions.
        de.xima.fc.action.onErrorDisplayName : <STRING>
                
        de.xima.fc.action.icons         : <OBJECT[
            action    : <STRING> # ID of the image used as an icon for this action.
            condition : <STRING> # ID of the image used as an icon for the condition of this action.
            error     : <STRING> # ID of the image used as an icon for the error of this action.
        ]>
        
        de.xima.fc.action.providesFile  : <BOOL> # True if the action may create (a) new file(s). See below for a list.
                                                 # Must be set tot true even if this particular action does not provide
                                                 # a file.
        de.xima.fc.action.requiresFile  : <BOOL> # True if the action may need (a) local file(s). See below for a list.
                                                 # Must be set to true even if this particular action does not load any files.
        
        de.xima.fc.action.active        : <BOOL>             # Whether the action has been set to active.
        de.xima.fc.action.type          : <POSITIVE_INTEGER> # Identifier of the action, starting at 0.
                                                             # 0 is "Abschlussseite (Template)". Must be 
                                                             # in the same order as currently displayed
                                                             # on the FormCycle user interface.
        de.xima.fc.action.condition     : <CONDITION>        # Condition for the action. See below.
        de.xima.fc.action.details       : <OBJECT>           # Details of the action. See below for ACTION-DETAILS-*
    }
}


* EDGE *
# Represents a transition from one status to another.
{
    id         : "de.xima.fc.transition-<UNIQUE_ID" # Unique transition id.
    source     : <STRING> # Id of the source status of the transition. 
    target     : <STRING> # Id of the target status of the transition. 
    properties : {
            de.xima.fc.transition.type    : AUTO | MANUAL | TIMED  # Type of the transition.     
            de.xima.fc.transition.details : <OBJECT> # Details of the specified transition.
                                                     # See below (TRANSITION-DETAILS-*) for the
                                                     # data format of currently supported actions. 
        },
}


* RESOURCE-USERGROUP *
{
    id : "de.xima.fc.resource.userGroup-<UNIQUE_ID>" # Unique id for the html template resource.
    name : <STRING> # User group name.
    # All keys below CURRENTLY UNUSED.
    systemID : <NUMBER> # System-defined id of this user group.
    description : <STRING> # User group description.
    users : <ARRAY[RESOURCE-USER]> # Ids of users part of this user group.
    mailboxAccess : <ARRAY[MAILBOX]> # Ids of mailboxes this group may access.
}

* RESOURCE-HTML *
{
    id : "de.xima.fc.resource.html-<UNIQUE_ID>" # Unique id for the html template resource.
    name : <STRING> # HTML template name.
    html : <STRING> # HTML of the template. Currently unused.
}

* RESOURCE-XSL *
{
    id : "de.xima.fc.resource.xsl-<UNIQUE_ID>" # Unique id for the xsl template resource.
    name : <STRING> # XSL template name.
    xsl : <STRING> # XSL of the template. Currently unused.
}

* RESOURCE-URL *
{
    id : "de.xima.fc.resource.url-<UNIQUE_ID>" # Unique id for the url template resource.
    name : <STRING> # URL template name.
    url : <STRING> # URL of the template. Currently unused.
}

* RESOURCE-MAILBOX *
{
    id : "de.xima.fc.resource.mailbox-<UNIQUE_ID>" # Unique id for the mailbox resource.
    name : <STRING> # Mailbox name.
    description : <STRING> # Mailbox description. Currently unused.
    restrictToUserGroup : <ARRAY[STRING]> # Array of ids of the user groups to which the mailbox is available. Currently unused.
}

* RESOURCE-PLUGIN *
{
    id : "de.xima.fc.resource.plugin-<UNIQUE_ID>" # Unique id for the plugin.
    name : <STRING> # Plugin name.
    keys : <ARRAY[{ # CURRENTLY UNUSED
        name : <STRING> # Name of the key.
        required : <BOOL> # Whether a value needs to be set for this key.
    }
    ]>
    
}

* RESOURCE-FILE *
{
    id : "de.xima.fc.resource.file-<UNIQUE_ID>" # Unique id for the file resource.
    name : null | <STRING> # Name of the file. This is the name given when configuring an action that gets a file.
                           # Null if the action dooes not allow for a name to be set. (Eg. "Upload Bereitstellen")
                           # Empty string if no name has been set.
    label : <SRING> # Label of the file. This is the label shown when configuring an action that requires a file. Usually the name of the action itself.
    mime : <STRING> # MIME type of the file. For now, you may simply set it to "application/octet-stream".
}

* RESOURCE-FONT *
{
    id   : "de.xima.fc.resource.font-<UNIQUE_ID>" # Unique ID for the font.
    mime : <STRING> # Mime type of the font. May be empty string if sourceType is FAMILY.
    sourceType : FAMILY | URL | BASE64 # URL and BASE64 specify the font data,
                                       # FAMILY relies upon an external font.
                                       # Values for family for which the font data is built-in.
                                       #   FONTAWESOME          Uses the font font-awesome.
                                       #   de.xima.fc.resource.font.sentinel  FormCycle icons. /formcycle/javax.faces.resource/fonts/sentinel.woff.xhtml
                                       #   UNICODE              Uses a standard unicode gylph.   
    sourceData : <STRING> # Font data.
}

* RESOURCE-IMAGE-FONT *
{
    id        : "de.xima.fc.resource.image.font-<UNIQUE_ID>"
    codepoint : <NUMBER> | <STRING>  # UNICODE codepoint of the icon. If a string, it is interpreted as the name of the glyph in the font.
    color     : null | <NUMBER 0-0xFFFFFF> # Color of the glyph. May be null for no specific color.
    font      : <STRING> # ID of the font used for rendering.
}
* RESOURCE-IMAGE-SVG *
{
    id  : "de.xima.fc.resource.image.svg-<UNIQUE_ID>"
    svg : <STRING> # SVG data, without an enclosing <svg> tag.
}
* RESOURCE-IMAGE-IMAGE *
{
    id   : "de.xima.fc.resource.image.image-<UNIQUE_ID>"
    mime : <STRING> # MIME type of the file. Eg. "image/png".
    sourceType : URL | BASE64 # Whether sourceData contains an url or a base64 string.
    sourceData : <STRING> # Either the url or the binary data encoded as base64.
}


* CONDITION *
{
    type : NONE | FORM | REGEXP # Type of the condition.
    displayName : <STRING> # Localized name of the condition.
    details : <OBJECT> # Condition details. See below.
}

* CONDITION-DETAILS-NONE *
{
}

* CONDITION-DETAILS-FORM *
{
    displayNameConditionOperator : <STRING>
    hasRHS            : <BOOL> # True iff conditions requires a right-hand side, ie. EQUAL, NOTEQUAL, CONTAINS, GREATER, SMALLER, STARTSWITH, ENDSON, MATCHES
    conditionLHS      : <STRING> # Selector string for the form input field.
    conditionOperator : EMPTY | NONEMPTY | EQUAL | NOTEQUAL | CONTAINS | GREATER | SMALLER | STARTSWITH | ENDSON | MATCHES # Type of the condition.
    conditionRHS      : <STRING> # Right hand side of the condition. Empty if not applicable.
    nextAction        : STOP | NEXT | <STRING> # Action taken if condition is not met. May be either
                                        # STOP (do not proceed to any further action), 
                                        # NEXT (proceed to the next action) or the 
                                        # id of an action that is to be executed.
                                        # Note that action ids take the "de.xima.fc.action-"
                                        # prefix, thus there cannot be any name collisions.
}

* CONDITION-DETAILS-REGEXP *
{
    regexp : <STRING> # Regexp that gets checked.
}


* ACTION-DETAILS-ABSCHLUSSSEITE *
{
    targetTemplate : <STRING> # ID of the (html) target template.
}

* ACTION-DETAILS-CALLBACK *
{
    targetCallback : <STRING> # Class of the target callback.
}

* ACTION-DETAILS-DATEIANVORGANGANHANGEN *
{
    loadFrom : <ARRAY[STRING]> # IDs of the files to be attached.
}

* ACTION-DETAILS-DATEIAUSLIEFERN *
{
    loadFrom : <ARRAY[STRING]> # IDs of the files to be attached.
    forceDownload : <BOOL> # Whether the browser may decide how to handle the file.
}

* ACTION-DETAILS-DATENBANK *
{
    sqlStatement : <STRING> # SQL statement to be executed.
}

* ACTION-DETAILS-EMAIL *
{
    headerTo : <STRING> # Mail TO.
    headerFrom : <STRING> # Mail FROM.
    headerSubject : <STRING> # Mail SUBJECT.
    body : <STRING> # Mail BODY (as HTML).
    loadFrom : <ARRAY[STRING]> # IDs of the files to be attached.
}

* ACTION-DETAILS-EXPORTPERSISTENCE *
{
    saveAs : <STRING> # ID of the file created.
}

* ACTION-DETAILS-EXPORTXML *
{
    saveAs : <STRING> # ID of the file created.
    xslTemplate : <STRING> # ID of the xsl template to use.
    sanitizeOutput : <BOOL> # Whether the output should be sanitzed so that it conform to html specification.
}

* ACTION-DETAILS-EXTERNERESOURCE *
{
    resourceURL : <STRING> # External url of the resource.
    saveAs : <STRING> # ID of the file created.
}

* ACTION-DETAILS-FORMULARANDERN *
{
     formChanges : <ARRAY[
        {
            selector : <STRING> # Text of the form input field selector.
            newValue : <STRING> # New value to be assigned to the form input field.
        }
    ]>
}

* ACTION-DETAILS-KOMPRIMIEREN *
{
    saveAs : <STRING> # ID of the file created.
    loadFrom : <ARRAY[STRING]> # List of IDs of the files to compress.   
}

* ACTION-DETAILS-PDFFILL *
{
    sourceType : EXTERNAL | TENANT | FORM # Resource type to use.
    resourceName : <STRING> # URL or file name of the resource.
    saveAs : <STRING> # ID of the file created.
}

* ACTION-DETAILS-POSTREQUEST *
{
    targetURL       : <STRING> # URL for posting the request.
    allValues       : <BOOL> # Whether the values of all input fields are to be sent.
    noFiles         : <BOOL> # Whether no files should be send with the request.
    urlParameters   : <ARRAY[{
        key: <STRING> # Parameter key.
        value : <STRING> # Parameter value.
    }]>
    xslTemplate      : <STRING> # xslTemplate to use.
    requestEncoding   : <STRING> # Encoding of the post request.
    responseEncoding : <STRING> # Encoding requested to be used in the response.
}

* ACTION-DETAILS-PLUGINAUSFUHREN *
{
    plugin : <STRING> # ID of the plugin to execute.
    parameters : <ARRAY[ # CURRENTLY UNUSED
        key : <STRING> # Parameter name.
        value : <STRING> # Parameter value, may be form input fields selector.
        required : <BOOL> # Whether a value is required for this key.
    ]>
}

* ACTION-DETAILS-SPEICHERN *
{
    targetDirectory : <STRING> # Name of the target directory, may contain form input fields selector.
    loadFrom : <ARRAY[STRING]> # IDs of the files to be saved.
    usePID : <BOOL> # Whether the process id should be used.
}

* ACTION-DETAILS-STATUSANDERUNG *
{
    targetStatus : <STRING> # ID of the target state.
}

* ACTION-DETAILS-TEXTDATEIERZEUGEN *
{
    textContent : <STRING> # Content of the text file.
    saveAs : <STRING> # ID of the file created.
}

* ACTION-DETAILS-UPLOADBEREITSTELLEN *
{
    uploadElementName : <ARRAY[STRING]> # Name of the formcycle upload element.
    saveAs : <STRING> # ID of the file created.
}

* ACTION-DETAILS-VERARBEITUNGABBRECHEN *
{
}

* ACTION-DETAILS-VORGANGDUPLIZIEREN *
{
    targetStatus: <STRING> # Target status for the duplicate.
}

* ACTION-DETAILS-VORGANGEINENEUEPROZESSIDVERGEBEN *
{
}

* ACTION-DETAILS-VORGANGINPOSTFACHKOPIEREN *
{
    targetMailBox : <STRING> # ID of the target mail box.
}

* ACTION-DETAILS-VORGANGINPOSTFACHVERSCHIEBEN *
{
    targetMailBox : <STRING> # ID of the target mail box.
}

* ACTION-DETAILS-VORGANGLOSCHEN *
{
}

* ACTION-DETAILS-WEITERLEITUNG *
{
    redirectTemplate : <STRING> # ID of the url template.
    urlParameters   : <ARRAY[{
        key: <STRING> # Parameter key.
        value : <STRING> # Parameter value.
    }]>
}

* ACTION-DETAILS-WORDFILL *
{
    sourceType : EXTERNAL | TENANT | FORM # Resource type to use.
    resourceName : <STRING> # URL or file name of the resource.
    saveAs : <STRING> # ID of the file created.
}

* ACTION-DETAILS-XMLEINLESENUNDFORMULARFELDERSETZEN *
{
    loadFrom : <ARRAY[STRING]> # ID of the file interpreted as xml.
    xslTemplate : <STRING> # ID of the xsl template used.
    xpath       : <ARRAY[
        key   : <STRING> # Field name, may contain form input field selector(s).
        value : <STRING> # XPath, may form input field selector(s).
    ]>
}


* TRANSITION-DETAILS-AUTO *
# Represents an automatic transition initiated by the software.
{
    initiator: <STRING> # ID of the action that may initiate this transition.
}

* TRANSITION-DETAILS-MANUAL *
# Represents a transition that may be initated by the user.
{
    restrictToUserGroup: <ARRAY[STRING]> # List of ids of the user groups which may initiate this transition.
}

* TRANSITION-DETAILS-TIMED *
# Represents a timed transition.
{
    transitionAfter: <POSITIVE_INTEGER> # Time in seconds. The delay after which an automated transition takes place.
}


* ACTIONS PROVIDING A FILE *
 - PDF (Fill)
 - Word (Fill)
 - Komprimieren (Zip)
 - Upload bereitstellen
 - Export (XML-Datei)
 - Export (Persistence)
 - Externe Ressource
 - Textdatei erzeugen

* ACTIONS REQUIRING A FILE *
 - Datei an Vorgang anhängen
 - Datei ausliefern
 - E-Mail
 - Komprimieren (Zip) 
 - Speichern (Dateisystem)
 - XML einlesen
 
 * OTHER ACTIONS *
  - Abschlusseite (Template)
  - Datenbank (SQL Statement)
  - Statusänderung
  - Vorgang duplizieren (Statusänderung)
  - Vorgang in Postfach kopieren
  - Vorgang in Postfach verschieben
  - Vorgang löschen
  - Weiterleitung
  - Formular ändern
  - POST-Request
  - Plugin ausführen
